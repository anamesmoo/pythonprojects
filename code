import sqlite3

def criar_conexao():
    try:
        conexao = sqlite3.connect('escola.db')
        return conexao
    except sqlite3.Error as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

def fechar_conexao(conexao):
    if conexao:
        conexao.close()

class Aluno:
    def __init__(self, id, nome, cpf, matricula):
        self.id = id
        self.nome = nome
        self.cpf = cpf
        self.matricula = matricula

class Nota:
    def __init__(self, id, aluno_id, materia, nota):
        self.id = id
        self.aluno_id = aluno_id
        self.materia = materia
        self.nota = nota

def criar_tabelas():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS alunos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT NOT NULL,
                    cpf TEXT NOT NULL UNIQUE,
                    matricula TEXT NOT NULL UNIQUE
                );
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS notas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    aluno_id INTEGER NOT NULL,
                    materia TEXT NOT NULL,
                    nota REAL NOT NULL,
                    FOREIGN KEY (aluno_id) REFERENCES alunos(id) ON DELETE CASCADE
                );
            """)
            conexao.commit()
    except sqlite3.Error as e:
        print(f"Erro ao criar tabelas: {e}")
    finally:
        fechar_conexao(conexao)
    print('Criei as tabelas')

def gerenciar_alunos():
    while True:
        opcao = input('''\n\nGerenciar Alunos
1 - Inserir Aluno
2 - Consultar Alunos
3 - Alterar Nome do Aluno
4 - Excluir Aluno
5 - Voltar ao Menu Principal
Digite uma opção: ''')
        if opcao == '1':
            inserir_aluno()
        elif opcao == '2':
            consultar_alunos()
        elif opcao == '3':
            alterar_nome_aluno()
        elif opcao == '4':
            excluir_aluno()
        elif opcao == '5':
            break
        else:
            print('Opção Inválida!\n')

def inserir_aluno():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            nome = input('Digite o nome do aluno: ')
            cpf = input('Digite o CPF do aluno: ')
            matricula = input('Digite a matrícula do aluno: ')
            cursor.execute("INSERT INTO alunos (nome, cpf, matricula) VALUES (?, ?, ?);", (nome, cpf, matricula))
            aluno_id = cursor.lastrowid
            conexao.commit()
            print(f'Aluno inserido com sucesso! ID: {aluno_id}')
    except sqlite3.Error as e:
        print(f"Erro ao inserir aluno: {e}")
    finally:
        fechar_conexao(conexao)

def consultar_alunos():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}, CPF: {aluno[2]}, Matrícula: {aluno[3]}")
    except sqlite3.Error as e:
        print(f"Erro ao consultar alunos: {e}")
    finally:
        fechar_conexao(conexao)
    print('Consultei os alunos')

def alterar_nome_aluno():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}, CPF: {aluno[2]}, Matrícula: {aluno[3]}")
            aluno_id = int(input('Digite o ID do aluno: '))
            nome = input('Digite o novo nome do aluno: ')
            cursor.execute("UPDATE alunos SET nome = ? WHERE id = ?;", (nome, aluno_id))
            conexao.commit()
            print('Nome do aluno atualizado com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao alterar nome do aluno: {e}")
    finally:
        fechar_conexao(conexao)

def excluir_aluno():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}, CPF: {aluno[2]}, Matrícula: {aluno[3]}")
            aluno_id = int(input('Digite o ID do aluno que deseja excluir: '))
            cursor.execute("DELETE FROM alunos WHERE id = ?;", (aluno_id,))
            conexao.commit()
            print('Aluno e suas notas excluídos com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao excluir aluno: {e}")
    finally:
        fechar_conexao(conexao)

def inserir_nota():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}, CPF: {aluno[2]}, Matrícula: {aluno[3]}")
            aluno_id = int(input('Digite o ID do aluno: '))
            materia = input('Digite a matéria: ')

            # Verificar se já existem duas notas para esta matéria e aluno
            cursor.execute("SELECT COUNT(*) FROM notas WHERE aluno_id = ? AND materia = ?;", (aluno_id, materia))
            count = cursor.fetchone()[0]

            if (count >= 2):
                print(f"O aluno já tem duas notas registradas para a matéria '{materia}'.")
                return

            nota = float(input('Digite a nota: '))
            cursor.execute("INSERT INTO notas (aluno_id, materia, nota) VALUES (?, ?, ?);", (aluno_id, materia, nota))
            conexao.commit()
            print('Nota inserida com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao inserir nota: {e}")
    finally:
        fechar_conexao(conexao)

def consultar_notas():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT id, nome FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}")
            aluno_id = int(input('Digite o ID do aluno: '))
            cursor.execute("""
                SELECT notas.id, alunos.nome, notas.materia, notas.nota
                FROM notas
                JOIN alunos ON notas.aluno_id = alunos.id
                WHERE alunos.id = ?;
            """, (aluno_id,))
            notas = cursor.fetchall()
            print(f"Notas do Aluno ID {aluno_id}:")
            for nota in notas:
                print(f"ID: {nota[0]}, Matéria: {nota[2]}, Nota: {nota[3]}")
    except sqlite3.Error as e:
        print(f"Erro ao consultar notas: {e}")
    finally:
        fechar_conexao(conexao)

def alterar_nota():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT id, nome FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}")
            aluno_id = int(input('Digite o ID do aluno: '))
            cursor.execute("""
                SELECT DISTINCT materia
                FROM notas
                WHERE aluno_id = ?;
            """, (aluno_id,))
            materias = cursor.fetchall()
            print(f"Matérias do Aluno ID {aluno_id}:")
            for materia in materias:
                print(f"Matéria: {materia[0]}")
            materia = input('Digite a matéria que deseja alterar as notas: ')
            cursor.execute("""
                SELECT id, nota
                FROM notas
                WHERE aluno_id = ? AND materia = ?;
            """, (aluno_id, materia))
            notas = cursor.fetchall()
            if len(notas) == 0:
                print(f"Não foram encontradas notas para a matéria '{materia}' do aluno ID {aluno_id}.")
                return
            print(f"Notas da Matéria '{materia}' do Aluno ID {aluno_id}:")
            for nota in notas:
                print(f"ID: {nota[0]}, Nota: {nota[1]}")
            for nota in notas:
                nova_nota = float(input(f'Digite a nova nota para a nota ID {nota[0]} (atual: {nota[1]}): '))
                cursor.execute("UPDATE notas SET nota = ? WHERE id = ?;", (nova_nota, nota[0]))
            conexao.commit()
            print('Notas alteradas com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao alterar nota: {e}")
    finally:
        fechar_conexao(conexao)

def excluir_nota():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT id, nome FROM alunos;")
            alunos = cursor.fetchall()
            print("Lista de Alunos:")
            for aluno in alunos:
                print(f"ID: {aluno[0]}, Nome: {aluno[1]}")
            aluno_id = int(input('Digite o ID do aluno: '))
            cursor.execute("""
                SELECT notas.id, notas.materia, notas.nota
                FROM notas
                WHERE aluno_id = ?;
            """, (aluno_id,))
            notas = cursor.fetchall()
            print(f"Notas do Aluno ID {aluno_id}:")
            for nota in notas:
                print(f"ID: {nota[0]}, Matéria: {nota[1]}, Nota: {nota[2]}")
            nota_id = int(input('Digite o ID da nota que deseja excluir: '))
            cursor.execute("DELETE FROM notas WHERE id = ?;", (nota_id,))
            conexao.commit()
            print('Nota excluída com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao excluir nota: {e}")
    finally:
        fechar_conexao(conexao)

def excluir():
    while True:
        tipo_exclusao = input('''\n\nOpções de Exclusão e Alteração de Matéria
1 - Excluir Aluno
2 - Excluir Nota de Aluno
3 - Excluir Matéria
4 - Alterar Nome de Matéria
5 - Voltar ao Menu Principal
Digite uma opção: ''')
        if tipo_exclusao == '1':
            excluir_aluno()
        elif tipo_exclusao == '2':
            excluir_nota()
        elif tipo_exclusao == '3':
            excluir_materia()
        elif tipo_exclusao == '4':
            alterar_nome_materia()
        elif tipo_exclusao == '5':
            break
        else:
            print('Opção Inválida!\n')

def excluir_materia():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT DISTINCT materia FROM notas;")
            materias = cursor.fetchall()
            print("Lista de Matérias:")
            for materia in materias:
                print(f"Matéria: {materia[0]}")
            materia = input('Digite a matéria que deseja excluir: ')
            cursor.execute("DELETE FROM notas WHERE materia = ?;", (materia,))
            conexao.commit()
            print(f'Todas as notas da matéria "{materia}" foram excluídas com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao excluir matéria: {e}")
    finally:
        fechar_conexao(conexao)

def alterar_nome_materia():
    try:
        conexao = criar_conexao()
        if conexao:
            cursor = conexao.cursor()
            cursor.execute("SELECT DISTINCT materia FROM notas;")
            materias = cursor.fetchall()
            print("Lista de Matérias:")
            for materia in materias:
                print(f"Matéria: {materia[0]}")
            materia_antiga = input('Digite o nome da matéria que deseja alterar: ')
            nova_materia = input('Digite o novo nome para a matéria: ')
            cursor.execute("UPDATE notas SET materia = ? WHERE materia = ?;", (nova_materia, materia_antiga))
            conexao.commit()
            print('Nome da matéria alterado com sucesso!')
    except sqlite3.Error as e:
        print(f"Erro ao alterar nome da matéria: {e}")
    finally:
        fechar_conexao(conexao)

def menu():
    while True:
        opcao = input('''\n\nPrograma de Cadastro e Consulta de Notas
1 - Criar Tabelas
2 - Gerenciar Alunos
3 - Inserir Nota
4 - Consultar Notas
5 - Alterar Nota
6 - Excluir
7 - Terminar Programa
Digite uma opção: ''')
        if opcao == '1':
            criar_tabelas()
        elif opcao == '2':
            gerenciar_alunos()
        elif opcao == '3':
            inserir_nota()
        elif opcao == '4':
            consultar_notas()
        elif opcao == '5':
            alterar_nota()
        elif opcao == '6':
            excluir()
        elif opcao == '7':
            print('Fim da Execução do Programa.')
            break
        else:
            print('Opção Inválida!\n')

if __name__ == "__main__":
    menu()
